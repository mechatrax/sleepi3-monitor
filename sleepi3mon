#!/usr/bin/env python3

import configparser
import subprocess
import sys
import time
import os
import yaml

import sleepi


PROGRAM_VERSION = '1.4'

ENV_FILE = '/etc/default/sleepi3'
DEFAULT_I2C_ADDRESS = '0x6E'
DEFAULT_I2C_BUS = '1'

CONFIG_FILE = '/etc/sleepi3-monitor/monitor.yml'


class Event(object):
    def __init__(self, config):
        self.exec = config['exec']
        self.threshold = config['threshold'] if 'threshold' in config else 0
        self.oneshot = config['oneshot'] if 'oneshot' in config else False
        self.channel = config['channel'] if 'channel' in config and config['channel'] in (1, 2) else 0
        self.done = False
    
    def is_triggered(self, mon):
        val = mon.get_value(self.channel)
        result = self.check_value(val)
        if self.oneshot:
            if not result:
                self.done = False
        return result
    
    def do_action(self, env):
        if self.oneshot:
            if self.done:
                return
            else:
                self.done = True
        try:
            env['THRESHOLD'] = str(self.threshold)
            if os.path.isdir(self.exec):
                for f in sorted(os.listdir(self.exec)):
                    cmd = os.path.join(self.exec, f)
                    if os.access(cmd, os.X_OK):
                        subprocess.run(cmd, shell=True, env=env)
            elif os.path.isfile(self.exec):
                if os.access(self.exec, os.X_OK):
                    subprocess.run(self.exec, shell=True, env=env)
            else:
                subprocess.run(self.exec, shell=True, env=env)
        except OSError as e:
            print(e)
    

class EventOver(Event):
    def check_value(self, value):
        if value >= self.threshold:
            return 1
        return 0
    

class EventUnder(Event):
    def check_value(self, value):
        if value <= self.threshold:
            return 1
        return 0
    

class EventAny(Event):
    def check_value(self, value):
        return 1
    

class EventNone(Event):
    def check_value(self, value):
        return 0
    

class Sleepi3Monitor(object):
    def __init__(self, sleepi3, name, histsize):
        self.sleepi3 = sleepi3
        self.name = name
        self.histsize = histsize
        self.values = []
        self.events = []
    
    def add_event(self, action):
        self.events.append(action)
        
    def update_value(self):
        self.values.insert(0, self.read_register())
        if len(self.values) > self.histsize:
            self.values = self.values[:-1]
    

class Sleepi3ExtinMonitor(Sleepi3Monitor):
    def __init__(self, sleepi3, histsize):
        super().__init__(sleepi3, 'extin', histsize)
    
    def read_register(self):
        return self.sleepi3.registers['external_input_count'].value
    
    def get_history(self):
        hist = {
            'EXTIN_HISTORY': to_history(self.values),
            'EXTIN_HISTORY_SIZE': str(self.histsize)
        }
        return hist
    
    def get_value(self, channel):
        return self.values[0]
    

class Sleepi3PushswMonitor(Sleepi3Monitor):
    def __init__(self, sleepi3, histsize):
        super().__init__(sleepi3, 'pushsw', histsize)
    
    def read_register(self):
        return self.sleepi3.registers['push_switch_count'].value
    
    def get_history(self):
        hist = {
            'PUSHSW_HISTORY': to_history(self.values),
            'PUSHSW_HISTORY_SIZE': str(self.histsize)
        }
        return hist
    
    def get_value(self, channel):
        return self.values[0]
    

class Sleepi3VoltageMonitor(Sleepi3Monitor):
    def __init__(self, sleepi3, histsize):
        super().__init__(sleepi3, 'voltage', histsize)
    
    def read_register(self):
        v1 = self.sleepi3.registers['voltage1'].value
        v2 = self.sleepi3.registers['voltage2'].value
        v = v1 if v1 > v2 else v2
        return [v, v1, v2]
    
    def get_history(self):
        hist = {
            'VOLTAGE_HISTORY_SIZE': str(self.histsize)
        }
        v = [[], [], []]
        for val in self.values:
            for i in range(3):
                v[i].append(val[i])
        hist.update({'VOLTAGE_HISTORY': to_history(v[0])})
        hist.update({'VOLTAGE1_HISTORY': to_history(v[1])})
        hist.update({'VOLTAGE2_HISTORY': to_history(v[2])})
        return hist
    
    def get_value(self, channel):
        return self.values[0][channel]
    

def to_history(values):
    return "{}".format(values)[1:-1]
    

def parse_environment(path):
    parser = configparser.ConfigParser()
    parser.read_dict({'DEFAULT': {
        'I2C_ADDRESS': DEFAULT_I2C_ADDRESS,
        'I2C_BUS': DEFAULT_I2C_BUS,
    }})
   
    try: 
        with open(path, 'r') as file:
            string = file.read()
    except IOError as e:
        print("Cannot access {}.".format(path))
        exit(e)
    
    parser.read_string('[env]' + string)
    env = parser['env']
    
    return env 


def read_configure(path):
    conf = {}
    
    try: 
        with open(path, 'r') as file:
            conf = yaml.full_load(file)
    except IOError as e:
        print("Cannot access {}.".format(path))
        exit(e)
    
    return conf
    

def main(args):
    monitor_type = {
        'extin': Sleepi3ExtinMonitor,
        'pushsw': Sleepi3PushswMonitor,
        'voltage': Sleepi3VoltageMonitor
    }
    event_type = {
        'any': EventAny,
        'none': EventNone,
        'over': EventOver,
        'under': EventUnder
    }

    if '-D' in args:
        loop = True
    else:
        loop = False
   
    if '-c' in args: 
        configs = read_configure(args[args.index('-c') + 1])
    else:
        configs = read_configure(CONFIG_FILE)
    
    env = parse_environment(ENV_FILE)
    bus = int(env['I2C_BUS'])
    addr = int(env['I2C_ADDRESS'], 16)
    sleepi3 = sleepi.Sleepi3(bus, addr)
    monitors = []
    
    interval = configs['common']['interval']
    for key in monitor_type.keys():
        if not key in configs:
            continue
        histsize = configs[key]['history_size']
        mon = monitor_type[key](sleepi3, histsize)
        if not configs[key]['commands']:
            continue
        for cmd in configs[key]['commands']:
            mon.add_event(event_type[cmd['condition']](cmd))
        monitors.append(mon)
    
    while True:
        for mon in monitors:
            mon.update_value()
            g_env.update(mon.get_history())
            for ev in mon.events:
                if ev.is_triggered(mon):
                    ev.do_action(g_env)
        if loop:
            time.sleep(interval)
        else:
            break


if __name__ == '__main__':
    g_env = os.environ.copy()
    
    try:
        main(sys.argv[1:])
    except KeyboardInterrupt:
        sys.exit(0)

